{"version":3,"sources":["App.js","index.js"],"names":["App","className","type","onChange","e","file","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","result","workBook","XLSX","data","sheet_to_json","Sheets","SheetNames","final","push","Object","keys","d","vals","map","x","onerror","error","readExcel","files","then","console","log","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yOAEe,SAASA,IA0BtB,OACE,sBAAKC,UAAU,MAAf,UACE,mDACA,yEACA,uBACEC,KAAK,OACLC,SAAU,SAACC,IA/BC,SAACC,GAsBjB,OArBgB,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,kBAAkBN,GAC7BI,EAAWG,OAAS,SAACR,GACnB,IAAMS,EAAcT,EAAEU,OAAOC,OACvBC,EAAWC,OAAUJ,EAAa,CAAEX,KAAM,WAC1CgB,EAAOD,QAAWE,cACtBH,EAASI,OAAOJ,EAASK,WAAW,KAEhCC,EAAQ,GACdA,EAAMC,KAAKC,OAAOC,KAAKP,EAAK,KAPH,oBAQXA,GARW,yBAQhBQ,EARgB,QASnBC,EAAOH,OAAOC,KAAKC,GAAGE,KAAI,SAACC,GAAD,OAAOH,EAAEG,MACvCP,EAAMC,KAAKI,IAFb,2BAAqB,IARI,8BAYzBpB,EAAQe,IAEVb,EAAWqB,QAAU,SAACC,GACpBvB,EAAOuB,QAcLC,CADa5B,EAAEU,OAAOmB,MAAM,IACZC,MAAK,SAAChB,GACpBiB,QAAQC,IAAIlB,YChCxB,IAAMmB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACzC,EAAD,MAEFqC,I","file":"static/js/main.c1b6842c.chunk.js","sourcesContent":["import \"./styles.css\";\nimport * as XLSX from \"xlsx\";\nexport default function App() {\n  const readExcel = (file) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = (e) => {\n        const bufferArray = e.target.result;\n        const workBook = XLSX.read(bufferArray, { type: \"buffer\" });\n        const data = XLSX.utils.sheet_to_json(\n          workBook.Sheets[workBook.SheetNames[0]]\n        );\n        const final = [];\n        final.push(Object.keys(data[0]));\n        for (let d of data) {\n          let vals = Object.keys(d).map((x) => d[x]);\n          final.push(vals);\n        }\n        resolve(final);\n      };\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n    return promise;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n      <input\n        type=\"file\"\n        onChange={(e) => {\n          const file = e.target.files[0];\n          readExcel(file).then((data) => {\n            console.log(data);\n          });\n        }}\n      />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}